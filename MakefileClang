CC = clang
AS = as     # Native Assembler
AR = ar		# Native Archive Tool

APP_OBJS = hello.o
LIB_OBJS = greet/count.o greet/greet.o
OBJS = $(APP_OBJS) $(LIB_OBJS)

# Used for LLVM Bitcode libraries
LIB_BC_OBJS = greet/count.bc greet/greet.bc

all: link

clean:
	rm -rf *.i *.S *.ll *.o *.bc *.a *.so *.wasm **/*.i **/*.S **/*.o **/*.ll **/*.bc **/*.bca

.PRECIOUS: %.i 
%.i: %.c
	$(CC) -E -o $@ $<

.PRECIOUS: %.ll 
%.ll: %.i
	$(CC) -S -emit-llvm -o $@ $<

# Generate llvm bitcode from the text representation
.PRECIOUS: %.bc
%.bc: %.ll
	llvm-as -o $@ $<

# Compile into native assembly
.PRECIOUS: %.S 
%.S: %.bc
	llc -o $@ $<

# Assemble into native object file
.PRECIOUS: %.o 
%.o: %.S
	$(AS) -o $@ $< 

link: $(OBJS)
	$(CC) -o hello $^

# LLVM Bitcode Library as bitcode *.bc file
# LLVM bitcode of different translation units can be linked together into a single *.bc file
libgreet.bc: $(LIB_BC_OBJS)
	llvm-link -o libgreet.bc $^

link_libgreet_bc_direct: $(APP_OBJS) libgreet.bc
	$(CC) -o hello $^

# LLVM Bitcode Library as Archive
# LLVM is able to generate and use archives that contains LLVM bitcode
# It seems that LLVM support for bitcode archives is a bit hit and miss
# A commenter suggested using a *.bca extension to differentiate bitcode archives, but this
# doesn't seem to work with LIBRARY_PATH and -l
# https://stackoverflow.com/questions/60691901/how-can-i-use-llvm-ar-generated-archive-file
libgreetbc.a: $(LIB_BC_OBJS)
	llvm-ar rcs libgreetbc.a $^

link_libgreetbc_a_direct: hello.bc libgreetbc.a
	$(CC) -fuse-ld=lld -o hello $^

link_libgreetbc_a_indirect: hello.bc libgreetbc.a
	$(CC) -L. -fuse-ld=lld -o hello hello.bc -lgreetbc

# Static Archive Rules
# These demonstrate how to create a static archive from *.o object files
# And how to either directly or indirectly link the static archive

libgreet.a: $(LIB_OBJS)
	$(AR) rcs libgreet.a $^

# The archive has to come last
link_libgreet_a_direct: $(APP_OBJS) libgreet.a
	$(CC) -o hello $^

# We set the LIBRARY_PATH environment variable so -lgreet finds ./libgreet.a
link_libgreet_a_indirect: $(APP_OBJS) libgreet.a
	$(CC) -L. -o hello $(APP_OBJS) -lgreet

# Dynamic Archive Rules
# These demonstrate how to create a shared library from *.o object files
# And how to either directly or indirectly link the static archive

libgreet.so: $(LIB_OBJS)
	$(CC) -shared -fPIC -o libgreet.so $^

link_libgreet_so: $(APP_OBJS) libgreet.so
	$(CC) -L. -o hello $(APP_OBJS) -lgreet

# Example of running the resulting binary. We need to set LD_LIBRARY_PATH to the directory of libgreet.so
hello_so: link_libgreet_so
	LD_LIBRARY_PATH=. ./hello
